import type { KeyInfoType } from './types'

export const symbols: Record<string, KeyInfoType> = {
  '~': {
    title: 'Tilde',
    action: 'command',
    vimHelp: 'change.txt.html#%7e',
    text: '',
    secondaryText: 'toggle case',
  },
  '!': {
    title: 'Bang',
    action: 'operator',
    vimHelp: 'change.txt.html#%21',
    text: '',
    secondaryText: 'external filter',
  },
  '@': {
    title: 'At/Register',
    action: 'command',
    hasDot: true,
    vimHelp: 'repeat.txt.html#%40',
    text: ":let @q='_ctrl-r_ctrl-r_q (paste @q)<br>*modify*<br>' (closing quote) & _enter_<br><br>:g/pattern/d X (delete pattern and save to x register)",
    secondaryText: 'play macro',
  },
  '#': {
    title: 'Hash',
    action: 'motion',
    vimHelp: 'pattern.txt.html#%23',
    text: "Same as '*', but search backward.",
    secondaryText: 'prev ident',
  },
  $: {
    title: 'Money',
    action: 'motion',
    vimHelp: 'motion.txt.html#%24',
    text: 'To end of line',
    secondaryText: 'end of line',
  },
  '%': {
    title: 'Percent',
    action: 'motion',
    vimHelp: 'motion.txt.html#%25',
    text: 'Find the next item in this line after or under the cursor and jump to its match. |inclusive| motion.',
    secondaryText: 'goto match',
  },
  '^': {
    title: 'Caret',
    action: 'motion',
    vimHelp: 'motion.txt.html#%5e',
    text: 'Return to first non-blank character',
    secondaryText: "'soft' bol",
  },
  '&': {
    title: 'Ampersand',
    action: 'command',
    vimHelp: 'change.txt.html#%26',
    text: 'Synonym for `:s` (repeat last substitute)<br>Note that the flags are not remembered, thus it might actually work differently.<br>You can use `:&&` to keep the flags.',
    secondaryText: 'repeat :s',
  },
  '&amp;': {
    title: 'Ampersand',
    action: 'motion',
    vimHelp: 'change.txt.html#%26',
    text: 'Synonym for `:s` (repeat last substitute)<br>Note that the flags are not remembered, thus it might actually work differently.<br>You can use `:&&` to keep the flags.',
    secondaryText: 'repeat :s',
  },
  '*': {
    title: 'Asterisk',
    action: 'motion',
    vimHelp: 'pattern.txt.html#star',
    text: "Search forward for the [count]'th occurrence of the word nearest to the cursor",
    secondaryText: 'next ident',
  },
  '(': {
    title: 'Begin parenthesis',
    action: 'motion',
    vimHelp: 'motion.txt.html#%28',
    text: '[count] sentences backward.  |exclusive| motion.',
    secondaryText: 'begin sentence',
  },
  ')': {
    title: 'End parenthesis',
    action: 'motion',
    vimHelp: 'motion.txt.html#%29',
    text: '[count] sentences forward.  |exclusive| motion.',
    secondaryText: 'end sentence',
  },
  _: {
    title: 'Underscore',
    action: 'motion',
    vimHelp: 'motion.txt.html#_',
    text: '[count] - 1 lines downward, on the first non-blank character |linewise|.',
    secondaryText: "'soft' bol down",
  },
  '+': {
    title: 'Plus',
    action: 'motion',
    vimHelp: 'motion.txt.html#%2b',
    text: '[count] lines downward, on the first non-blank character |linewise|.',
    secondaryText: 'next line',
  },
  '-': {
    title: 'Minus/Dash',
    action: 'motion',
    vimHelp: 'motion.txt.html#-',
    plugins: 'AndrewRadev/switch.vim | Change true/false, etc',
    text: '[count] lines upward, on the first non-blank character |linewise|.',
    secondaryText: 'prev line',
  },
  '=': {
    title: 'Equal',
    action: 'operator',
    vimHelp: 'change.txt.html#%3d',
    text: "Filter {motion} lines through the external program given with the 'equalprg' option.  When the 'equalprg' option is empty (this is the default), use the internal formatting function",
    secondaryText: 'auto format',
  },
  '`': {
    title: 'backtick',
    action: 'motion',
    hasDot: true,
    vimHelp: 'motion.txt.html#%60',
    text: 'Jump to the mark {a-z} in the current buffer.',
    secondaryText: 'goto mark',
  },
  '[': {
    title: 'Beginning Bracket',
    action: 'motion',
    hasDot: true,
    vimHelp: 'index.txt.html#%5b',
    text: 'A lot of Vim power found here! check out :help [',
    secondaryText: 'misc',
  },
  ']': {
    title: 'Ending Bracket',
    action: 'motion',
    hasDot: true,
    vimHelp: 'index.txt.html#%5d',
    text: 'A lot of Vim power found here! check out :help ]',
    secondaryText: 'misc',
  },
  '{': {
    title: 'Begin Brace',
    action: 'motion',
    vimHelp: 'motion.txt.html#%7b',
    text: '[count] paragraphs backward.  |exclusive| motion.',
    secondaryText: 'begin paragraph',
  },
  '}': {
    title: 'End Brace',
    action: 'motion',
    vimHelp: 'motion.txt.html#%7d',
    text: '[count] paragraphs forward.  |exclusive| motion.',
    secondaryText: 'end paragraph',
  },
  '?': {
    title: 'Question Mark',
    action: 'motion',
    hasDot: true,
    vimHelp: 'pattern.txt.html#%3f',
    text: "Search backward for the [count]'th occurrence of the latest used pattern |last-pattern| with latest used |{offset}|.",
    secondaryText: 'find (reverse)',
  },
  '/': {
    title: 'Forward Slash',
    action: 'motion',
    hasDot: true,
    vimHelp: 'pattern.txt.html#%2f',
    text: "Search forward for the [count]'th occurrence of the latest used pattern |last-pattern| with latest used |{offset}|.",
    secondaryText: 'find',
  },
  '\\': {
    title: 'Back Slash',
    action: 'extra',
    hasDot: true,
    vimHelp: 'pattern.txt.html#%2f%5c',
    text: 'A backslash followed by a single character, with no special meaning, is reserved for future expansions',
    secondaryText: 'not used!',
  },
  '|': {
    title: 'Pipe',
    action: 'motion',
    vimHelp: 'motion.txt.html#bar',
    text: '',
    secondaryText: 'bol/goto col',
  },
  '.': {
    title: 'dot',
    action: 'command',
    vimHelp: 'repeat.txt.html#.',
    text: '',
    secondaryText: 'repeat last command',
  },
  ',': {
    title: 'Comma',
    action: 'motion',
    vimHelp: 'motion.txt.html#%2c',
    text: '',
    secondaryText: 'reverse f/F/t/T',
  },
  '"': {
    title: 'Double Quote',
    action: 'extra',
    hasDot: true,
    vimHelp: 'pattern.txt.html#%2f%5c',
    text: '',
    secondaryText: 'reg spec',
  },
  "'": {
    title: 'Single Quote',
    action: 'motion',
    hasDot: true,
    vimHelp: 'motion.txt.html#%27',
    text: "'< & '> start/end of visual selection<br> '[ & '] - start/end of last change or yank<br> '. - position of where last change was made<br> '^ - position of cursor when last Vim last left insert mode - This is how gi command works<br> '' - position before last jump (Super useful!). See :h ''<br>` (backtick) Go to line AND column",
    secondaryText: 'goto mark bol',
  },
  ';': {
    title: 'Semicolon',
    action: 'motion',
    vimHelp: 'motion.txt.html#%3b',
    text: '',
    secondaryText: 'repeat f/F/t/T',
  },
  ':': {
    title: 'Colon',
    action: 'command',
    vimHelp: 'cmdline.txt.html#%3a',
    text: 'Execute a command',
    secondaryText: 'ex command line',
  },
  // '&gt;': {
  //   title: 'Greater than',
  //   action: 'operator',
  //   ,
  //   vimHelp: '',
  //   text: '',
  //   secondaryText: 'indent',
  // },
  // '&lt;': {
  //   title: 'Less than',
  //   action: 'operator',
  //   ,
  //   vimHelp: '',
  //   text: '',
  //   secondaryText: 'un-indent',
  // },
  '>': {
    title: 'Greater than',
    action: 'operator',
    vimHelp: 'change.txt.html#%3e',
    text: '',
    secondaryText: 'indent',
    numberIndicator: '3',
  },
  '<': {
    title: 'Less than',
    action: 'operator',
    vimHelp: 'change.txt.html#%3c',
    text: '',
    secondaryText: 'un-indent',
    numberIndicator: '3',
  },
}
